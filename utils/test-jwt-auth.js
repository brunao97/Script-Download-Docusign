require('dotenv').config();
const DocuSignJWTAuth = require('../src/auth/jwt-auth');

/**
 * Script para testar autentica√ß√£o JWT do DocuSign
 * Conforme documenta√ß√£o: https://developers.docusign.com/platform/auth/jwt-get-token/
 */

async function testJWTAuthentication() {
    console.log('üß™ TESTE DE AUTENTICA√á√ÉO JWT DOCUSIGN');
    console.log('====================================');
    console.log('Baseado na documenta√ß√£o: https://developers.docusign.com/platform/auth/jwt-get-token/\n');

    try {
        // Verificar configura√ß√µes
        console.log('üîç 1. Verificando configura√ß√µes...');
        const requiredVars = [
            'DOCUSIGN_INTEGRATION_KEY',
            'DOCUSIGN_USER_ID',
            'DOCUSIGN_ACCOUNT_ID'
        ];

        const missing = requiredVars.filter(key => !process.env[key]);
        if (missing.length > 0) {
            throw new Error(`Vari√°veis obrigat√≥rias n√£o definidas: ${missing.join(', ')}`);
        }

        console.log('‚úÖ Configura√ß√µes b√°sicas validadas');
        console.log(`   Integration Key: ${process.env.DOCUSIGN_INTEGRATION_KEY?.substring(0, 8)}...`);
        console.log(`   User ID: ${process.env.DOCUSIGN_USER_ID?.substring(0, 8)}...`);
        console.log(`   Account ID: ${process.env.DOCUSIGN_ACCOUNT_ID?.substring(0, 8)}...`);
        console.log(`   Base Path: ${process.env.DOCUSIGN_BASE_PATH || 'https://demo.docusign.net/restapi'}`);

        // Inicializar autentica√ß√£o
        console.log('\nüîê 2. Inicializando autentica√ß√£o JWT...');
        const auth = new DocuSignJWTAuth({
            integrationKey: process.env.DOCUSIGN_INTEGRATION_KEY,
            userId: process.env.DOCUSIGN_USER_ID,
            accountId: process.env.DOCUSIGN_ACCOUNT_ID,
            basePath: process.env.DOCUSIGN_BASE_PATH || 'https://demo.docusign.net/restapi',
            privateKeyPath: process.env.DOCUSIGN_RSA_PRIVATE_KEY_PATH || './private.key'
        });

        // Testar gera√ß√£o de JWT
        console.log('\nüé´ 3. Testando gera√ß√£o de JWT...');
        const jwtToken = await auth.generateJWT();
        console.log('‚úÖ JWT gerado com sucesso');
        console.log(`   Token JWT: ${jwtToken.substring(0, 50)}...`);

        // Testar obten√ß√£o de access token
        console.log('\nüîë 4. Testando obten√ß√£o de access token...');
        const accessToken = await auth.getAccessToken();
        console.log('‚úÖ Access token obtido com sucesso');
        console.log(`   Access Token: ${accessToken.substring(0, 20)}...`);

        // Testar informa√ß√µes do usu√°rio
        console.log('\nüë§ 5. Testando informa√ß√µes do usu√°rio...');
        const userInfo = await auth.getUserInfo();
        console.log('‚úÖ Informa√ß√µes do usu√°rio obtidas com sucesso');

        // Resumo final
        console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
        console.log('===============================');
        console.log(`‚úÖ Usu√°rio: ${userInfo.name}`);
        console.log(`‚úÖ Email: ${userInfo.email}`);
        console.log(`‚úÖ Contas: ${userInfo.accounts?.length || 0}`);
        console.log(`‚úÖ Token expira em: ${auth.tokenExpiry?.format('DD/MM/YYYY HH:mm:ss')}`);

        return {
            success: true,
            userInfo,
            accessToken: accessToken.substring(0, 20) + '...',
            tokenExpiry: auth.tokenExpiry?.format('DD/MM/YYYY HH:mm:ss')
        };

    } catch (error) {
        console.error('\n‚ùå TESTE FALHOU!');
        console.error('================');
        console.error(`Erro: ${error.message}`);
        
        if (error.response) {
            console.error(`Status: ${error.response.status}`);
            console.error(`Dados: ${JSON.stringify(error.response.data, null, 2)}`);
        }

        console.error('\nüí° DICAS PARA RESOLVER:');
        console.error('========================');
        
        if (error.message.includes('secretOrPrivateKey')) {
            console.error('üîë Problema com chave privada:');
            console.error('   - Execute: npm run check-key');
            console.error('   - Se necess√°rio: npm run generate-key');
        }
        
                 if (error.response?.status === 400) {
             const errorData = error.response.data;
             
             if (errorData?.error === 'consent_required') {
                 console.error('üîê CONSENTIMENTO DA APLICA√á√ÉO NECESS√ÅRIO:');
                 console.error('   ‚ö†Ô∏è  Voc√™ precisa dar consentimento para a aplica√ß√£o primeiro!');
                 console.error('   üöÄ Execute: npm run setup-consent');
                 console.error('   üìã Siga as instru√ß√µes para dar consentimento');
                 console.error('   ‚úÖ Depois execute: npm run test-jwt');
             } else {
                 console.error('üîê Problema de autentica√ß√£o:');
                 console.error('   - Verifique Integration Key no DocuSign Developer Portal');
                 console.error('   - Verifique User ID (GUID do usu√°rio)');
                 console.error('   - Certifique-se de que a chave p√∫blica RSA est√° configurada');
                 console.error('   - Verifique se o usu√°rio tem permiss√£o de "impersonation"');
             }
         }
        
        if (error.response?.status === 401) {
            console.error('üö´ N√£o autorizado:');
            console.error('   - Verifique se a aplica√ß√£o est√° ativa no DocuSign');
            console.error('   - Verifique se o usu√°rio existe e tem permiss√µes');
            console.error('   - Verifique se est√° usando o ambiente correto (demo/produ√ß√£o)');
        }

        return {
            success: false,
            error: error.message,
            details: error.response?.data
        };
    }
}

// Executar teste se chamado diretamente
if (require.main === module) {
    testJWTAuthentication()
        .then(result => {
            if (result.success) {
                console.log('\nüöÄ Autentica√ß√£o JWT funcionando! Voc√™ pode executar: npm start');
                process.exit(0);
            } else {
                console.log('\nüõ†Ô∏è  Resolva os problemas acima e tente novamente');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('‚ùå Erro inesperado:', error);
            process.exit(1);
        });
}

module.exports = { testJWTAuthentication }; 